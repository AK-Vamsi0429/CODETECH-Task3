VERILOG CODE:
// processor.v
module PipelinedProcessor(input clk, input reset);

    reg [15:0] PC;
    reg [15:0] instr_mem [0:15];
    reg [7:0] data_mem [0:15];
    reg [7:0] registers [0:15];

    // Pipeline registers
    reg [15:0] IF_ID_instr;
    reg [15:0] ID_EX_instr;
    reg [7:0]  ID_EX_A, ID_EX_B;
    reg [15:0] EX_MEM_instr;
    reg [7:0]  EX_MEM_result;
    reg [15:0] MEM_WB_instr;
    reg [7:0]  MEM_WB_result;

    // IF Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            PC <= 0;
        end else begin
            IF_ID_instr <= instr_mem[PC];
            PC <= PC + 1;
        end
    end

    // ID Stage
    wire [3:0] rs1 = IF_ID_instr[7:4];
    wire [3:0] rs2 = IF_ID_instr[3:0];
    always @(posedge clk) begin
        ID_EX_instr <= IF_ID_instr;
        ID_EX_A <= registers[rs1];
        ID_EX_B <= registers[rs2];
    end

    // EX Stage
    wire [3:0] opcode = ID_EX_instr[15:12];
    wire [3:0] rd     = ID_EX_instr[11:8];
    always @(posedge clk) begin
        EX_MEM_instr <= ID_EX_instr;
        case (opcode)
            4'b0001: EX_MEM_result <= ID_EX_A + ID_EX_B; // ADD
            4'b0010: EX_MEM_result <= ID_EX_A - ID_EX_B; // SUB
            4'b0011: EX_MEM_result <= data_mem[ID_EX_B]; // LOAD
            default: EX_MEM_result <= 0;
        endcase
    end

    // WB Stage
    always @(posedge clk) begin
        MEM_WB_instr <= EX_MEM_instr;
        MEM_WB_result <= EX_MEM_result;
        case (MEM_WB_instr[15:12])
            4'b0001, 4'b0010, 4'b0011: registers[MEM_WB_instr[11:8]] <= EX_MEM_result;
        endcase
    end

endmodule

TEST BENCH:
// tb_processor.v
`timescale 1ns / 1ps
module tb_Processor;

    reg clk, reset;
    PipelinedProcessor uut (.clk(clk), .reset(reset));

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        reset = 1;
        #10 reset = 0;

        // Load some instructions into instruction memory
        uut.instr_mem[0] = 16'b0001_0001_0000_0010; // ADD R1 = R0 + R2
        uut.instr_mem[1] = 16'b0010_0010_0001_0011; // SUB R2 = R1 - R3
        uut.instr_mem[2] = 16'b0011_0011_0000_0001; // LOAD R3 = MEM[R1]

        // Initialize registers and memory
        uut.registers[0] = 8'd10;
        uut.registers[2] = 8'd5;
        uut.registers[3] = 8'd3;
        uut.data_mem[5] = 8'd99;

        #100 $finish;
    end

endmodule
